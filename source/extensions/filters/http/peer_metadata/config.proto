/* Copyright Istio Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package io.istio.http.peer_metadata;

// Peer metadata provider filter. This filter encapsulates the discovery of the
// peer telemetry attributes for consumption by the telemetry filters.
message Config {
  // Use CONNECT baggage header encoding.
  message Baggage {
  }

  // Use workload metadata xDS. Requires that the bootstrap extension is enabled.
  // For downstream discovery, uses the remote address as the lookup key.
  // For upstream discovery:
  //
  // * If the upstream host address is an IP, uses it as the lookup key;
  //
  // * If the upstream host address is internal, uses the
  // "filter_metadata.tunnel.destination" dynamic metadata value.
  message WorkloadDiscovery {
  }

  // Use Istio HTTP metadata exchange headers. Removes these headers if found.
  message IstioHeaders {
  }

  // An exhaustive list of the derivation methods.
  message DiscoveryMethod {
    oneof method_specifier {
      Baggage baggage = 1;
      WorkloadDiscovery workload_discovery = 2;
      IstioHeaders istio_headers = 3;
    }
  }

  // The order of the derivation of the downstream peer metadata, in the precedence order.
  repeated DiscoveryMethod downstream_discovery = 1;

  // The order of the derivation of the upstream peer metadata, in the precedence order.
  repeated DiscoveryMethod upstream_discovery = 2;

  // An exhaustive list of the metadata propagation methods.
  message PropagationMethod {
    oneof method_specifier {
      IstioHeaders istio_headers = 1;
    }
  }

  // Downstream injection of the metadata via a response header.
  repeated PropagationMethod downstream_propagation = 3;

  // Upstream injection of the metadata via a request header.
  repeated PropagationMethod upstream_propagation = 4;

  // True to enable sharing with the upstream.
  bool shared_with_upstream = 5;
}
